# version: '3'
# name: granja_favorita

services:

####################################################################################################################
  # db-granja - 3306 - 7.5s
####################################################################################################################
  db-granja:
    container_name: mysql
    image: mysql:8.0.33
    # ports:
    #   - "3307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
    
    restart: always

    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost", "-uroot", "-p${DB_PASSWORD}"]
      interval: 10s          # Cada 5 segundos hace la comprobación
      timeout: 5s           # Espera máximo 3 segundos para la respuesta
      retries: 10           # Considera fallida la prueba tras 5 intentos fallidos
      start_period: 120s     # Tiempo para que el contenedor arranque antes de empezar a chequear
      
    volumes:
     - mysql_data:/var/lib/mysql

####################################################################################################################
  # grafana - 3000
####################################################################################################################

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    ports:
      - "3000:3000" # Puerto expuesto para acceder a grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_PASSWORD}

      # Esteblecer ruta para grafana
      - GF_SERVER_ROOT_URL=${GF_SERVER_ROOT_URL}
      - GF_SERVER_SERVE_FROM_SUB_PATH=${GF_SERVER_SERVE_FROM_SUB_PATH}
      # - GF_SERVER_ROOT_URL=%(protocol)s://%(domain)s/grafana   # Produccion
      # # - GF_SERVER_ROOT_URL=http://localhost/grafana   # Local
      # - GF_SERVER_SERVE_FROM_SUB_PATH=true

    restart: always
    depends_on:
      db-granja:
        condition: service_healthy

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 10s       # cada 15 segundos
      timeout: 5s         # espera máxima 5 segundos
      retries: 10          # falla después de 5 intentos fallidos
      start_period: 30s   # tiempo para que Grafana arranque antes de la primera verificación

    volumes:
      - grafana_data:/var/lib/grafana

####################################################################################################################
  # config-server - 8888 - 11.8s
####################################################################################################################
  config-server:
    container_name: config-server
    build: ./config-service
    # ports:
    #   - "8888:8888"
    environment:
      # Perfil para despliegue
      SPRING_PROFILES_ACTIVE: default
      
      # Credenciales GitHub
      GIT_DEFAULT_LABEL: ${GIT_DEFAULT_LABEL}
      GIT_URI: ${GIT_URI}
      GIT_SEARCH_PATHS: ${GIT_SEARCH_PATHS}
      GIT_USERNAME: ${GIT_USERNAME}
      GIT_PASSWORD: ${GIT_PASSWORD}
    
    restart: always
    depends_on:
      db-granja:
        condition: service_healthy
      
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 10s          # Cada 5 segundos hace la comprobación
      timeout: 5s           # Espera máximo 3 segundos para la respuesta
      retries: 10            # Considera fallida la prueba tras 5 intentos fallidos
      start_period: 30s     # Tiempo para que el contenedor arranque antes de empezar a chequear

# ###################################################################################################################
#   eureka-server - 8761 - 27.4s
# ###################################################################################################################
  eureka-server:
    container_name: eureka-server
    build: ./eureka-service
    # ports:
    #   - "8761:8761"
    environment:
      # Credenciales GitHub (config-server)
      SPRING_CONFIG_IMPORT: configserver:http://config-server:8888/

    restart: always
    depends_on:
      config-server:
        condition: service_healthy

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 10s          # Cada 5 segundos hace la comprobación
      timeout: 5s           # Espera máximo 3 segundos para la respuesta
      retries: 10            # Considera fallida la prueba tras 5 intentos fallidos
      start_period: 30s     # Tiempo para que el contenedor arranque antes de empezar a chequear

# ####################################################################################################################
#   # microservicio-principal - 8081 - 48.2s
# ####################################################################################################################
  microservicio-principal:
    container_name: microservicio-principal
    build: ./conejoMontaNacimiento
    # mem_limit: 512m
    environment:
      # Credenciales GitHub (config-server)
      SPRING_CONFIG_IMPORT: configserver:http://config-server:8888/

      # Eureka Server
      ES_HOST: eureka-server

      # Base de datos
      DB_HOST: db-granja
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      VALOR_DDL: ${VALOR_DDL}

      # Cloudinary
      CLOUDINARY_CLOUD_NAME: ${CLOUDINARY_CLOUD_NAME}
      CLOUDINARY_API_KEY: ${CLOUDINARY_API_KEY}
      CLOUDINARY_API_SECRET: ${CLOUDINARY_API_SECRET}
      MARCA_AGUA_PAGINA: ${MARCA_AGUA_PAGINA}

    restart: always
    depends_on:
      eureka-server:
        condition: service_healthy

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 10s          # Cada 5 segundos hace la comprobación
      timeout: 5s           # Espera máximo 3 segundos para la respuesta
      retries: 10            # Considera fallida la prueba tras 5 intentos fallidos
      start_period: 60s     # Tiempo para que el contenedor arranque antes de empezar a chequear

# ####################################################################################################################
#   # microservicio-razas - 8082 - 48.2s
# ####################################################################################################################
  microservicio-razas:
    container_name: microservicio-razas
    build: ./microservicio-razas
    # mem_limit: 256m
    environment:
      # Credenciales GitHub (config-server)
      SPRING_CONFIG_IMPORT: configserver:http://config-server:8888/

      # Eureka Server
      ES_HOST: eureka-server

      # Base de datos
      DB_HOST: db-granja
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      VALOR_DDL: ${VALOR_DDL}

    restart: always
    depends_on:
      eureka-server:
        condition: service_healthy

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 10s          # Cada 5 segundos hace la comprobación
      timeout: 5s           # Espera máximo 3 segundos para la respuesta
      retries: 10            # Considera fallida la prueba tras 5 intentos fallidos
      start_period: 60s     # Tiempo para que el contenedor arranque antes de empezar a chequear

# ####################################################################################################################
#   # microservicio-articulos - 8083 - 48.2s
# ####################################################################################################################
  microservicio-articulos:
    container_name: microservicio-articulos
    build: ./microservicio-articulos
    # mem_limit: 256m
    environment:
      # Credenciales GitHub (config-server)
      SPRING_CONFIG_IMPORT: configserver:http://config-server:8888/

      # Eureka Server
      ES_HOST: eureka-server

      # Base de datos
      DB_HOST: db-granja
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      VALOR_DDL: ${VALOR_DDL}

      # Cloudinary
      CLOUDINARY_CLOUD_NAME: ${CLOUDINARY_CLOUD_NAME}
      CLOUDINARY_API_KEY: ${CLOUDINARY_API_KEY}
      CLOUDINARY_API_SECRET: ${CLOUDINARY_API_SECRET}
      MARCA_AGUA_PAGINA: ${MARCA_AGUA_PAGINA}

    restart: always
    depends_on:
      eureka-server:
        condition: service_healthy

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]
      interval: 10s          # Cada 5 segundos hace la comprobación
      timeout: 5s           # Espera máximo 3 segundos para la respuesta
      retries: 10            # Considera fallida la prueba tras 5 intentos fallidos
      start_period: 60s     # Tiempo para que el contenedor arranque antes de empezar a chequear

# ####################################################################################################################
#   # gateway-service - 8080 - 58.7s
# ####################################################################################################################
  gateway-service:
    container_name: gateway-service
    build: ./gateway-service
    # mem_limit: 256m
    # ports:
    #   - "8080:8080"
    environment:
      # Credenciales GitHub (config-server)
      SPRING_CONFIG_IMPORT: configserver:http://config-server:8888/

      # Eureka Server
      ES_HOST: eureka-server

      # Spring Security
      SECURITY_USER: ${SECURITY_USER}
      SECURITY_PASSWORD: ${SECURITY_PASSWORD}

    restart: always
    depends_on:
      microservicio-principal:
        condition: service_healthy
      microservicio-razas:
        condition: service_healthy
      microservicio-articulos:
        condition: service_healthy

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 10s          # Cada 5 segundos hace la comprobación
      timeout: 5s           # Espera máximo 3 segundos para la respuesta
      retries: 10            # Considera fallida la prueba tras 5 intentos fallidos
      start_period: 30s     # Tiempo para que el contenedor arranque antes de empezar a chequear

# ####################################################################################################################
#   # nginx - 80 - 58.9s
# ####################################################################################################################
  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/${NGINX_CONF_FILE}:/etc/nginx/nginx.conf:ro
      # - ${SSL_CERTIFICATE_FULLCHAIN} # Comendar local y descomentar prod
      # - ${SSL_CERTIFICATE_PRIVKEY} # Comendar local y descomentar prod
      # - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      # - /etc/letsencrypt/live/granjalafavorita.com/fullchain.pem:/etc/letsencrypt/live/granjalafavorita.com/fullchain.pem:ro
      # - /etc/letsencrypt/live/granjalafavorita.com/privkey.pem:/etc/letsencrypt/live/granjalafavorita.com/privkey.pem:ro

    restart: always
    depends_on:
      gateway-service:
        condition: service_healthy

    healthcheck:
      test: ["CMD", "pidof", "nginx"]
      interval: 10s          # Cada 5 segundos hace la comprobación
      timeout: 5s           # Espera máximo 3 segundos para la respuesta
      retries: 10            # Considera fallida la prueba tras 5 intentos fallidos
      start_period: 30s     # Tiempo para que el contenedor arranque antes de empezar a chequear

####################################################################################################################
  # volumes
####################################################################################################################

volumes:
  mysql_data:
    external: true
    name: granja-la-favorita_mysql_data
  grafana_data:
    external: true
    name: workspace-spring-tool-suite-4-4291release_grafana_data